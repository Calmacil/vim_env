" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the
" following enables syntax highlighting by default.
if has("syntax")
  syntax on
  highlight NbSp ctermbg=lightred guibg=lightred
  match NbSp /\%xa0/
endif

set listchars=tab:>-,trail:Â·,extends:>,precedes:<,nbsp:_
set list

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
set autowrite		" Automatically save before commands like :next and :make
set hidden             " Hide buffers when they are abandoned
set mouse=a		" Enable mouse usage (all modes)
set encoding=utf8
"set t_Co=256
set laststatus=2
"set textwidth=80

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

set number
set tabstop=4
set softtabstop=4
set ts=4
set sw=4
set et
set ruler
set rulerformat=%40(%=%t%h%m%r%w%<\ (%n)\ %4.7l,%-7.(%c%V%)\ %P%)

if has('gui_running')
    colo solarized

    " statusline
    hi User1 guifg=#eea040 guibg=#666666
    hi User2 guifg=#dd3333 guibg=#666666
    hi User3 guifg=#ff66ff guibg=#666666
    hi User4 guifg=#a0ee40 guibg=#666666
    hi User5 guifg=#eeee40 guibg=#666666

    set statusline=
    set statusline +=%1*\ %n\ %*     " buffer
    set statusline +=%5*%{&ff}%*     " file format
    set statusline +=%3*%y%*         " file type
    set statusline +=%4*\ %<%F%*     " full path
    set statusline +=%2*%m%*         " modified flag
    set statusline +=%1*%=%5l%*     " current line
    set statusline +=%2*/%L%*       " total lines
    set statusline +=%1*%4c\ %*     "cul number
    set statusline +=%2*\ %P\ %*

    set guioptions -=T
    set guioptions -=r
    set guioptions -=L
    "set guifont=DejaVu\ Sans\ Mono\ 10
    set guifont=Anonymous\ Pro\ 10

    set lines=64
    set columns=150

endif


if has("autocmd")
    autocmd! bufwritepost .vimrc source .vimrc
endif
filetype plugin on

source ~/.vim/bepo.vim
let mapleader=","

au bufread,bufnewfile *.names set ft=dosini
au bufread,bufnewfile *.t2t set ft=txt2tags
au bufread,bufnewfile /etc/nginx/* set ft=nginx
au bufread,bufnewfile .conky*  set ft=conkyrc
au bufread,bufnewfile *.tpl set ft=twig

au filetype javascript set omnifunc=javascriptcomplete#CompleteJS
au filetype html set omnifunc=htmlcomplete#CompleteTags
au filetype css set omnifunc=csscomplete#CompleteCSS
au filetype twig let g:myft="twig"
let g:SuperTabDefaultCompletionType = "context"
set completeopt=menuone,longest,preview

execute pathogen#infect()

""" personnal functions
function! TplTypeToggle()
    if g:myft == "twig"
        let g:myft="smarty"
        set syntax=smarty
    elseif g:myft == "smarty"
        let g:myft="twig"
        set syntax=twig
    endif
endfunction

let g:symfony_enable_shell_mapping = 0
map <C-F> :execute ":!"g:symfony_enable_shell_cmd<CR>
map <F8> :TagbarToggle<CR>
map <F9> :call TplTypeToggle()<CR>
